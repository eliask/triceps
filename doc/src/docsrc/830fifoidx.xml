<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5CR3//EN"
	"http://www.oasis-open.org/docbook/xml/4.5CR3/docbookx.dtd" [
<!ENTITY % userents SYSTEM "file:///ENTS/user.ent" >
%userents;
]>

<!--
(C) Copyright 2011-2014 Sergey A. Babkin.
This file is a part of Triceps.
See the file COPYRIGHT for the copyright notice and license information
-->

	<sect1 id="sc_cpp_fifoidx">
		<title>FifoIndexType reference</title>

		<indexterm>
			<primary>FifoIndexType</primary>
		</indexterm>
		<para>
		The FifoIndexType is defined in <pre>type/FifoIndexType.h</pre>.
		It works the same way as in Perl, except that it
		provides two ways to set the configuration values: either as the
		constructor/factory arguments or as chainable methods:
		</para>

<pre>
FifoIndexType(size_t limit = 0, bool jumping = false, bool reverse = false);
static FifoIndexType *make(size_t limit = 0, bool jumping = false, bool reverse = false);

FifoIndexType *setLimit(size_t limit);
FifoIndexType *setJumping(bool jumping);
FifoIndexType *setReverse(bool reverse);
</pre>

		<para>
		So the following are equivalent:
		</para>

<pre>
Autoref<IndexType> it1 = new FifoIndexType(100, true, true);
Autoref<IndexType> it2 = FifoIndexType::make()
	->setLimt(100)
	->setJumping(true)
	->setReverse(true);
</pre>

		<para>
		As usual, the settings can be changed only until the initialization.
		The settings can be read back at any time with:
		</para>

<pre>
size_t getLimit() const;
bool isJumping() const;
bool isReverse() const;
</pre>

		<para>
		Note that the limit is unsigned, and setting it to negative values
		results in it being set to very large positive values. The limit of 0
		means <quote>unlimited</quote>.
		</para>

		<para>
		All the common methods inherited from IndexType and Type work as usual.
		</para>

		<para>
		The <pre>equals()</pre> and <pre>match()</pre> are equivalent for the FifoIndexType, and are
		true when all the parameters are set to the same values. 
		</para>
	</sect1>
