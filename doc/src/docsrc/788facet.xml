<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5CR3//EN"
	"http://www.oasis-open.org/docbook/xml/4.5CR3/docbookx.dtd" [
<!ENTITY % userents SYSTEM "file:///ENTS/user.ent" >
%userents;
]>

<!--
(C) Copyright 2011-2013 Sergey A. Babkin.
This file is a part of Triceps.
See the file COPYRIGHT for the copyright notice and license information
-->

	<sect1 id="sc_ref_facet" xmlns:xi="http://www.w3.org/2001/XInclude">
		<title>Facet reference</title>

		<indexterm>
			<primary>Facet</primary>
		</indexterm>
		<para>
		A Facet represents a Nexus endpoint imported into a Triead. A facet is
		either a reader (reading from the nexus) or a writer (writing into the
		nexus).
		</para>

		<para>
		In the Perl API the Facets are created by <pre>TrieadOwner::makeNexus()</pre> or
		<pre>TrieadOwner::importNexus()</pre>. After that the metadata in the Facet is
		fixed and is available for reading only. Of course, the rowops can then
		be read or written.
		</para>

		<para>
		The reading of data from a Facet is done by <pre>TrieadOwner::nextXtray()</pre>.
		There is no way to read a tray from a particular facet, <pre>nextXtray()</pre>
		reads from all the Triead's imported reader facets, alternating in a
		fair fashion if more than one of them has data available.
		</para>

		<para>
		Each Facet has an FnReturn connected to it. The reading from a reader
		facet happens by forwarding the incoming rowops to that FnReturn. To
		actually process the data, you can either chain your handler labels
		directly to the FnReturn labels, or push an FnBinding onto that
		FnReturn. An incoming Xtray is always processed as a unit, with no
		intermixing with the other Xtrays.
		</para>

		<indexterm>
			<primary>Xtray</primary>
		</indexterm>
		<para>
		The writing to a writer facet happens by calling the labels of its
		FnReturn. Which then has the logic that collects all these rowops into
		a buffer. Then when the facet is flushed, that buffer becomes an
		indivisible Xtray that gets sent to the nexus as a unit, and then read
		by the reader facets as a unit.
		</para>

		<para>
		The facet metadata consists of:
		</para>

		<itemizedlist>
			<listitem>
			a set of labels, same as for an FnReturn, used to build the facet's
			internal FnReturn; these labels define the data that can be carried
			through the nexus;
			</listitem>
			<listitem>
			a set of row types that gets exported through the nexus;
			</listitem>
			<listitem>
			a set of table types that gets exported through the nexus.
			</listitem>
		</itemizedlist>

		<para>
		The table types must not contain any references to the Perl functions,
		or the export will fail. The Perl code snippets in the text format can
		be used instead.
		</para>

		<para>
		There are two special labels, named <pre>_BEGIN_</pre> and <pre>_END_</pre>. They may be
		defined explicitly, but if they aren't, they will be always added
		implicitly, with an empty row type (i.e. a row type with no fields).
		</para>

		<para>
		When reading an Xtray, the <pre>_BEGIN_</pre> label will always be called first,
		and <pre>_END_</pre> last, thus framing the rest of the data. There are
		optimizations that skip the calling if there is nothing chained to
		these labels in FnReturn nor to the top FnBinding, and the rowop as
		such carries no extra data. The optimization is actually a bit deeper:
		the <pre>_BEGIN_</pre> and <pre>_END_</pre> rowops that have no extra data in them aren't
		even carried in the Xtray through the nexus. They are generated on the
		fly if there is an interest in them, or otherwise the generation is
		skipped.
		</para>

		<para>
		What is meant by the <quote>extra data</quote>? It means, either the opcode is not
		<pre>OP_INSERT</pre> or there are some non-NULL fields (or both). If the <pre>_BEGIN_</pre>
		and <pre>_END_</pre> labels were auto-generated, their row type will contain no
		fields, so the only way to send the non-default data in them will be
		the non-default opcode. But if you define them explicitly with a
		different row type, you can also send the data in them.
		</para>

		<para>
		When sending the data into a writer Facet, you don't have to send the
		<pre>_BEGIN_</pre> and <pre>_END_</pre> rowops, if you don't, they will be generated
		automatically as needed, with the default contents (opcode <pre>OP_INSERT</pre>
		and NULLs in all the fields). Moreover, they will really be generated
		automatically on the reader side, thus saving the overhead of passing
		them through the nexus. Another consequence of this optimization is
		that it's impossible to create an Xtray consisting of only a default
		<pre>_BEGIN_</pre>, a default <pre>_END_</pre> and no payload rowops between them. It would
		be an empty Xtray, that would never be sent through the nexus. Even if
		you create these <pre>_BEGIN_</pre> and <pre>_END_</pre> rowops manually (but with the
		default contents), they will be thrown away when they reach the writer
		facet. If you want an Xtray to get through, you've got to either send
		the payload or put something non-default into at least one of the
		<pre>_BEGIN_</pre> or <pre>_END_</pre> rowops, at the very minimum a different opcode.
		</para>

		<para>
		Sending the <pre>_BEGIN_</pre> and <pre>_END_</pre> rowops into a writer facet also has the
		effect of flushing it. Even if these rowops have the default contents
		and become thrown away by the facet, the flushing effect still works.
		The <pre>_BEGIN_</pre> rowop flushes any data that has been collected in the
		buffer before it. The <pre>_END_</pre> rowop gets added to the buffer (or might
		get thrown away) and then flushes the buffer. If the buffer happens to
		contain anything at the flush time, that contents forms an Xtray and
		gets forwarded to the nexus.
		</para>

		<para>
		It's a long and winding explanation, but really it just does what is
		intuitively expected.
		</para>

		<para>
		A Facet has two names, the <i>full</i> one and the <i>short</i> one:
		</para>

		<itemizedlist>
			<listitem>
			The full name is copied from the nexus and consists of the name of
			the thread that exported the nexus and the name of the nexus itself
			separated by a slash, such as <quote>t1/nx1</quote>.
			</listitem>
			<listitem>
			The short name is the name with which the facet was imported. By
			default it's taken from the short name of the nexus. But it can
			also be given a different explicit name during the import, which is
			known as the <quote>as-name</quote> (because it's similar to the SQL <i>AS</i>
			clause). So if the full name is <quote>t1/nx1</quote>, the default short name
			will be <quote>nx1</quote>, but it can be overridden. The facet's FnReturn is
			named with the facet's short name.
			</listitem>
		</itemizedlist>

		<para>
		A Facet object is returned from either a nexus creation or nexus
		import. Then the owner thread can work with it.
		</para>

<pre>
$result = $fa->same($fa2);
</pre>

		<para>
		Check whether two references point to the same Facet object.
		</para>

<pre>
$name = $fa->getShortName();
</pre>

		<para>
		Get the short name of the facet (AKA <quote>as-name</quote>, with which it has been
		imported).
		</para>

<pre>
$name = $fa->getFullName();
</pre>

		<para>
		Get the full name of the nexus represented by this facet. The name
		consists of two parts separated by a slash, <quote><pre>$thread/$nexus</pre></quote>.
		</para>

<pre>
$result = $fa->isWriter();
</pre>

		<para>
		Check whether this is a writer facet (i.e. writes to the nexus). Each
		facet is either a writer or a reader, so if this method returns 0, it
		means that this is a reader facet.
		</para>

<pre>
$result = $fa->isReverse();
</pre>

		<para>
		Check whether this facet represents a reverse nexus.
		</para>

<pre>
$limit = $fa->queueLimit();
</pre>

		<para>
		Get the queue size limit of the facet's nexus. 
		For a reverse nexus the returned
		value will be a large integer (currently <pre>INT32_MAX</pre> but the exact value
		might change in the future). And if some different limit value was
		specified during the creation of the reverse nexus, it will be ignored.
		</para>

<pre>
$limit = &Triceps::Facet::DEFAULT_QUEUE_LIMIT;
</pre>

		<para>
		The constant of the default queue size limit that is used for the nexus
		creation, unless explicitly overridden.
		</para>

<pre>
$fret = $fa->getFnReturn();
</pre>

		<para>
		Get the FnReturn object of this facet. This FnReturn will have the same
		name as the facet's short name, and it has a special symbiotic relation
		with the Facet object. Its use depends on whether this is a reader or
		writer facet. For a writer facet, sending rowops to the labels in
		FnReturn (directly or by chaining them off the other labels) causes
		these rowops to be buffered for sending into the nexus. For a reader
		facet, you can either chain your logic directly off the FnReturn's
		labels, or push an FnBinding onto it as usual.
		</para>

<pre>
$nexus = $fa->nexus();
</pre>

		<para>
		Get the facet's nexus. There is not a whole lot that can be done with
		the nexus object, just getting the introspection information, and the same
		information can be obtained directly with the facet's methods.
		</para>

<pre>
$idx = $fa->beginIdx();
</pre>

		<para>
		Index (as in <quote>integer offset</quote>, not a table index) of the <pre>_BEGIN_</pre> label
		in the FnReturn's set of labels. There probably isn't much use for this
		method, and its name is somewhat confusing.
		</para>

<pre>
$idx = $fa->endIdx();
</pre>

		<para>
		Index (as in <quote>integer offset</quote>, not a table index) of the <pre>_END_</pre> label in
		the FnReturn's set of labels. There probably isn't much use for this
		method, and its name is somewhat confusing.
		</para>

<pre>
$label = $fa->getLabel($labelName);
</pre>

		<para>
		Get a label from FnReturn by name. This is a convenience method,
		equivalent to <pre>$fa->getFnReturn()->getLabel($labelName)</pre>. Confesses if
		the label with this name is not found.
		</para>

<pre>
@rowTypes = $fa->impRowTypesHash();
</pre>

		<para>
		Get (<quote>import</quote>) the whole set of row types exported through the nexus.
		The result is an array containing the name-value pairs, values being
		the imported row types. This array can be assigned into a hash to
		populate it. As it happens, the pairs will be ordered by name in the
		ASCII alphabetical order but there are no future guarantees about it.
		</para>

		<para>
		The actual import of the types is done only once, when the nexus is
		imported to create the facet, and the repeated calls of the <pre>imp*</pre>
		methods will return the same objects.
		</para>

<pre>
$rt = $fa->impRowType($rtName);
</pre>

		<para>
		Get (<quote>import</quote>) one row type by name. If the name is not known, will
		confess.
		</para>

<pre>
@tableTypes = $fa->impTableTypesHash();
</pre>

		<para>
		Get (<quote>import</quote>) the whole set of table types exported through the nexus.
		The result is an array containing the name-value pairs, values being
		the imported table types. This array can be assigned into a hash to
		populate it. As it happens, the pairs will be ordered by name in the
		ASCII alphabetical order but there are no future guarantees about it.
		</para>

		<para>
		The actual import of the types is done only once, when the nexus is
		imported to create the facet, and the repeated calls of the <pre>imp*</pre>
		methods will return the same objects.
		</para>

<pre>
$tt = $fa->impTableType($ttName);
</pre>

		<para>
		Get (<quote>import</quote>) one table type by name. If the name is not known, will
		confess.
		</para>

<pre>
$result = $fa-> flushWriter();
</pre>

		<para>
		Flush the collected buffered rowops to the nexus as a single Xtray. If
		there are no collected rowops, does nothing. Returns 1 if the flush
		succeeded (even if there was no data to send), 0 if this thread was
		requested to die and thus all the collected data gets thrown away, same
		as for the <pre>TrieadOwner::flushWriters()</pre>. The rules for when this method
		may be called is also the same: it may be called only after calling <pre>readyReady()</pre>, or it
		will confess.
		</para>

		<para>
		If this facet is in an input-only Triead, this call may sleep if a
		drain is currently active, until the drain is released.
		</para>
	</sect1>
